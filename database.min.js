"use strict";function Database(dbName){let database={put:(dbName,key,data)=>new Promise((resolve,reject)=>{if(!dbName)return reject({code:400,message:"dbName (Database Name) is required."});if(!key)return reject({code:400,message:"A key is required."});let db,open=indexedDB.open(dbName,1);open.onupgradeneeded=(()=>{(db=open.result).createObjectStore(dbName)}),open.onsuccess=(()=>{let tx=(db=open.result).transaction(dbName,"readwrite");tx.objectStore(dbName).put(data,key);tx.oncomplete=(()=>{resolve({db:dbName,event:"write",key:key,timestamp:Date.now()}),db.close()}),tx.onerror=(err=>{db.close(),reject(err)})})}),get:(dbName,key)=>new Promise((resolve,reject)=>{if(!dbName)return reject({code:400,message:"dbName (Database Name) is required."});if(!key)return reject({code:400,message:"A key is required."});let db,open=indexedDB.open(dbName,1);open.onupgradeneeded=(()=>{(db=open.result).createObjectStore(dbName)}),open.onsuccess=(()=>{let tx=(db=open.result).transaction(dbName,"readonly"),request=tx.objectStore(dbName).get(key);tx.oncomplete=(()=>{resolve({key:key,value:request.result}),db.close()}),tx.onerror=(err=>{db.close(),reject(err)})})}),del:(dbName,keys)=>new Promise((resolve,reject)=>{if(!dbName)return reject({code:400,message:"dbName (Database Name) is required."});if(!keys)return reject({code:400,message:"A key or an array of keys is required."});let db,keyPaths=[];keyPaths="string"==typeof keys?[keys]:keys;let open=indexedDB.open(dbName,1);open.onupgradeneeded=(()=>{(db=open.result).createObjectStore(dbName)}),open.onsuccess=(()=>{let tx=(db=open.result).transaction(dbName,"readwrite"),store=tx.objectStore(dbName);for(let i=0;i<keyPaths.length;i++){store.delete(keyPaths[i])}tx.oncomplete=(()=>{resolve({db:dbName,event:"delete",keys:keyPaths,timestamp:Date.now()}),db.close()}),tx.onerror=(err=>{db.close(),reject(err)})})}),list:(dbName,query)=>new Promise((resolve,reject)=>{if(!dbName)return reject({code:400,message:"dbName (Database Name) is required."});let db,open=indexedDB.open(dbName,1);open.onupgradeneeded=(()=>{(db=open.result).createObjectStore(dbName)}),open.onsuccess=(()=>{let tx=(db=open.result).transaction(dbName,"readwrite"),store=tx.objectStore(dbName);query&&"object"==typeof query||(query={});let limit,results=[],gt=query.gt||"\0",lt=query.lt||"ï¿¿";query.limit&&(limit=parseInt(query.limit));let reverse="next";query.reverse&&(reverse="prev");let request=store.openCursor(IDBKeyRange.bound(gt,lt,!0,!0),reverse);request.onsuccess=(()=>{let cursor=request.result;if(!limit&&cursor||results.length<limit&&cursor){let result={};query.values?(result.key=cursor.primaryKey,result.value=cursor.value):result=cursor.primaryKey,results.push(result),cursor.continue()}}),tx.oncomplete=(()=>{db.close(),resolve(results)}),tx.onerror=(err=>{db.close(),reject(err)})})}),deleteDB:dbName=>new Promise((resolve,reject)=>{if(!dbName)return reject({code:400,message:"dbName (Database Name) is required."});let request=indexedDB.deleteDatabase(dbName);request.onsuccess=(()=>{let e={db:dbName,event:"deleteDB",timestamp:Date.now()};resolve(e)}),request.onerror=request.onblocked=(err=>{reject({code:400,message:"Error deleting database. "+err.toString()})})}),exportDB:dbName=>database.list(dbName,{values:!0}),importDB:(dbName,items)=>new Promise((resolve,reject)=>{if(!dbName)return reject({code:400,message:"dbName (Database Name) is required."});let db,open=indexedDB.open(dbName,1);open.onupgradeneeded=(()=>{(db=open.result).createObjectStore(dbName)}),open.onsuccess=(()=>{let tx=(db=open.result).transaction(dbName,"readwrite"),store=tx.objectStore(dbName);for(let x=0;x<items.length;x++){store.put(items[x].value,items[x].key)}tx.oncomplete=(()=>{let e={db:dbName,event:"importDB",keys:items.map(val=>val.key),timestamp:Date.now()};db.close(),resolve(e)}),tx.onerror=(err=>{db.close(),reject({code:400,message:"Error importing database. "+err.toString()})})})}),db:dbName=>{dbName||(dbName="test");let onEvent,db={};db.onEvent=(cb=>{onEvent=cb});let eventHandler=e=>{onEvent&&"function"==typeof onEvent&&onEvent(e)};return db.put=((key,data)=>new Promise((resolve,reject)=>{database.put(dbName,key,data).then(result=>{eventHandler(result),resolve(result)}).catch(reject)})),db.get=((key,data)=>database.get(dbName,key)),db.del=(keys=>new Promise((resolve,reject)=>{database.del(dbName,keys).then(result=>{eventHandler(result),resolve(result)}).catch(reject)})),db.list=(query=>database.list(dbName,query)),db.deleteDB=(()=>new Promise((resolve,reject)=>{database.deleteDB(dbName).then(result=>{eventHandler(result),resolve(result)}).catch(reject)})),db.exportDB=(()=>database.exportDB(dbName)),db.importDB=(data=>new Promise((resolve,reject)=>{database.importDB(dbName,data).then(result=>{eventHandler(result),resolve(result)}).catch(reject)})),db}};return database.db(dbName)}